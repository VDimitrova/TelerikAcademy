/* 08 Define a class Matrix<T> to hold a matrix of numbers
 * (e.g. integers, floats, decimals).
 * 
 * 09 Implement an indexer this[row, col] to access the inner matrix cells.
 * 
 * 10 Implement the operators + and - (addition and subtraction of matrices
 * of the same size) and * for matrix multiplication.
 * Throw an exception when the operation cannot be performed.
 * Implement the true operator (check for non-zero elements).
 */

namespace _08_10_MatrixT
{
    using System;
    using System.Text;
    public class MatrixT<T> where T : struct, IComparable, IFormattable, IConvertible, IComparable<T>, IEquatable<T>
    {
        private T[,] matrix;
        private int row = 0;
        private int col = 0;

        public MatrixT()
        {
            this.matrix = new T[row, col];
        }

        public MatrixT(int row, int col) // Constructor
        {
            if (row < 0 || col < 0)
            {
                throw new ArgumentOutOfRangeException("Row and col must be positive.");
            }
            this.matrix = new T[row, col];
            this.row = row;
            this.col = col;
        }

        public void AddElement(T element)
        {
            if (row < this.matrix.GetLength(0))
            {
                if (col < this.matrix.GetLength(1))
                {
                    this.matrix[row, col] = element;
                    col++;
                    return;
                }
                else
                {
                    row++;
                    if (row < this.matrix.GetLength(0))
                    {
                        this.matrix[row, col] = element;
                        col++;
                        return;
                    }
                }
            }
            else
            {
                throw new ArgumentOutOfRangeException("The matrix is full.");
            }
        }

        public T this[int row, int col] // Accessing element by index
        {
            get
            {
                if (row >= this.row || col >= this.col
                || row < 0 || col < 0)
                {
                    throw new IndexOutOfRangeException("Index is out of range");
                }
                return this.matrix[row, col];
            }
            set
            {
                if (row >= this.matrix.GetLength(0) || col >= this.matrix.GetLength(1)
                || row < 0 || col < 0)
                {
                    throw new IndexOutOfRangeException("Index is out of range");
                }
                this.matrix[row, col] = value;
            }
        }

        // Addition of matrices
        public static MatrixT<T> operator +(MatrixT<T> first, MatrixT<T> second)
        {
            if (first.row == second.row && first.col == second.col)
            {
                MatrixT<T> result = new MatrixT<T>(first.row, first.col);
                for (int i = 0; i < first.row; i++)
                {
                    for (int j = 0; j < first.col; j++)
                    {
                        checked
                        {
                            result[i, j] = (dynamic)first[i, j] + second[i, j];
                        }
                    }
                }
                return result;
            }
            else
            {
                throw new Exception("The two matrices can't be summed.");
            }
        }

        // Subtraction of matrices
        public static MatrixT<T> operator -(MatrixT<T> first, MatrixT<T> second)
        {
            if (first.row == second.row && first.col == second.col)
            {
                MatrixT<T> result = new MatrixT<T>(first.row, first.col);
                for (int i = 0; i < first.row; i++)
                {
                    for (int j = 0; j < first.col; j++)
                    {
                        checked
                        {
                            result[i, j] = (dynamic)first[i, j] - second[i, j];
                        }
                    }
                }
                return result;
            }
            else
            {
                throw new Exception("The two matrices can't be subtracted.");
            }
        }

        // Multiplication of matrices
        public static MatrixT<T> operator *(MatrixT<T> first, MatrixT<T> second)
        {
            if (first.col == second.row && (first.row > 0 && second.col > 0 && first.col > 0))
            {
                MatrixT<T> result = new MatrixT<T>(first.row, second.col);
                for (int i = 0; i < result.row; i++)
                {
                    for (int j = 0; j < result.col; j++)
                    {
                        result[i, j] = (dynamic)0;
                        for (int k = 0; k < first.col; k++)
                        {
                            checked
                            {
                                result[i, j] = result[i,j] + (dynamic)first[i, k] * second[k, j];
                            }
                        }
                    }
                }
                return result;
            }
            else if (second.col == first.row && (second.row > 0 && first.col > 0 && second.col > 0))
            {
                MatrixT<T> result = new MatrixT<T>(second.row, first.col);
                for (int i = 0; i < result.row; i++)
                {
                    for (int j = 0; j < result.col; j++)
                    {
                        result[i, j] = (dynamic)0;
                        for (int k = 0; k < second.col; k++)
                        {
                            checked
                            {
                                result[i, j] = result[i,j] + (dynamic)second[i, k] * first[k, j];
                            }
                        }
                    }
                }
                return result;
            }
            else
            {
                throw new Exception("The two matrices can't be multiplied.");
            }
        }

        // True operator
        public static Boolean operator true(MatrixT<T> matrix)
        {
            int zero = 0;
            for (int i = 0; i < matrix.row; i++)
            {
                for (int j = 0; j < matrix.col; j++)
                {
                    if ((dynamic)matrix[i, j] == zero)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        // False operator
        public static Boolean operator false(MatrixT<T> matrix)
        {
            int zero = 0;
            for (int i = 0; i < matrix.row; i++)
            {
                for (int j = 0; j < matrix.col; j++)
                {
                    if ((dynamic)matrix[i, j] != zero)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        public void Print()
        {
            for (int i = 0; i < this.row; i++)
            {
                for (int j = 0; j < col; j++)
                {
                    Console.Write(this.matrix[i,j] + " ");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }
    }
}
